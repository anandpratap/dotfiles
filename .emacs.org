#+TITLE: My Emacs Configuration
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

* Introduction
My ~.emacs~ file. Most of the configurations are borrowed from:
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
- [[http://aaronbedra.com/emacs.d/][Aaron Bedra's Emacs configuration]]
- [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz's Emacs configuration]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

* Credentials
Load credentials used for gcal and slack.
#+BEGIN_SRC emacs-lisp
(load-library "~/.logins.el.gpg")
#+END_SRC
* Packages
Initialize and install packages using melpa.
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (progn
    (message "Microsoft Windows")))
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (message "Mac OS X")))
    ((string-equal system-type "gnu/linux") ; linux
  (progn
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (message "Linux"))))

  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
;;  (unless (assoc-default "gnu" package-archives)
;;    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t))
  (package-initialize)
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
(use-package speed-type)
#+END_SRC
* Sensible defaults
#+BEGIN_SRC emacs-lisp
  (defun sensible-defaults/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if
  there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))

  (defun sensible-defaults/reset-text-size ()
    (interactive)
    (text-scale-set 0))

  ;; Settings:

  (defun sensible-defaults/open-files-from-home-directory ()
    "When opening a file, start searching at the user's home
  directory."
    (setq default-directory "~/"))

  (defun sensible-defaults/increase-gc-threshold ()
    "Allow 20MB of memory (instead of 0.76MB) before calling
  garbage collection. This means GC runs less often, which speeds
  up some operations."
    (setq gc-cons-threshold 20000000))

  (defun sensible-defaults/delete-trailing-whitespace ()
    "Call DELETE-TRAILING-WHITESPACE every time a buffer is saved."
    (add-hook 'before-save-hook 'delete-trailing-whitespace))

  (defun sensible-defaults/treat-camelcase-as-separate-words ()
    "Treat CamelCaseSubWords as separate words in every programming
  mode."
    (add-hook 'prog-mode-hook 'subword-mode))

  (defun sensible-defaults/automatically-follow-symlinks ()
    "When opening a file, always follow symlinks."
    (setq vc-follow-symlinks t))

  (defun sensible-defaults/make-scripts-executable ()
    "When saving a file that starts with `#!', make it executable."
    (add-hook 'after-save-hook
              'executable-make-buffer-file-executable-if-script-p))

  (defun sensible-defaults/single-space-after-periods ()
    "Don't assume that sentences should have two spaces after
  periods. This ain't a typewriter."
    (setq sentence-end-double-space nil))

  (defun sensible-defaults/offer-to-create-parent-directories-on-save ()
    "When saving a file in a directory that doesn't exist, offer
  to (recursively) create the file's parent directories."
    (add-hook 'before-save-hook
              (lambda ()
                (when buffer-file-name
                  (let ((dir (file-name-directory buffer-file-name)))
                    (when (and (not (file-exists-p dir))
                               (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                      (make-directory dir t)))))))

  (defun sensible-defaults/apply-changes-to-highlighted-region ()
    "Turn on transient-mark-mode."
    (transient-mark-mode t))

  (defun sensible-defaults/overwrite-selected-text ()
    "If some text is selected, and you type some text, delete the
  selected text and start inserting your typed text."
    (delete-selection-mode t))

  (defun sensible-defaults/ensure-that-files-end-with-newline ()
    "If you save a file that doesn't end with a newline,
  automatically append one."
    (setq require-final-newline t))

  (defun sensible-defaults/confirm-closing-emacs ()
    "Ask if you're sure that you want to close Emacs."
    (setq confirm-kill-emacs 'y-or-n-p))

  (defun sensible-defaults/quiet-startup ()
    "Don't present the usual startup message, and clear the scratch
  buffer."
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil))

  (defun sensible-defaults/make-dired-file-sizes-human-readable ()
    "Add file sizes in human-readable units (KB, MB, etc) to dired
  buffers."
    (setq-default dired-listing-switches "-alh"))

  (defun sensible-defaults/shorten-yes-or-no ()
    "Don't ask `yes/no?', ask `y/n?'."
    (fset 'yes-or-no-p 'y-or-n-p))

  (defun sensible-defaults/always-highlight-code ()
    "Turn on syntax highlighting whenever possible."
    (global-font-lock-mode t))

  (defun sensible-defaults/refresh-buffers-when-files-change ()
    "When something changes a file, automatically refresh the
  buffer containing that file so they can't get out of sync."
    (global-auto-revert-mode t))

  (defun sensible-defaults/show-matching-parens ()
    "Visually indicate matching pairs of parentheses."
    (show-paren-mode t)
    (setq show-paren-delay 0.0))

  (defun sensible-defaults/flash-screen-instead-of-ringing-bell ()
    "When you perform a problematic operation, flash the screen
  instead of ringing the terminal bell."
    (setq visible-bell t))

  (defun sensible-defaults/set-default-line-length-to (line-length)
    "Set the default line length to LINE-LENGTH."
    (setq-default fill-column line-length))

  (defun sensible-defaults/open-clicked-files-in-same-frame-on-mac ()
    "When you double-click on a file in the Mac Finder open it as a
  buffer in the existing Emacs frame, rather than creating a new
  frame just for that file."
    (setq ns-pop-up-frames nil))

  (defun sensible-defaults/yank-to-point-on-mouse-click ()
    "When middle-clicking the mouse to yank from the clipboard,
  insert the text where point is, not where the mouse cursor is."
    (setq mouse-yank-at-point t))

  (defun sensible-defaults/use-all-settings ()
    "Use all of the sensible-defaults settings."
    (sensible-defaults/open-files-from-home-directory)
    (sensible-defaults/increase-gc-threshold)
    (sensible-defaults/delete-trailing-whitespace)
    (sensible-defaults/treat-camelcase-as-separate-words)
    (sensible-defaults/automatically-follow-symlinks)
    (sensible-defaults/make-scripts-executable)
    (sensible-defaults/single-space-after-periods)
    (sensible-defaults/offer-to-create-parent-directories-on-save)
    (sensible-defaults/apply-changes-to-highlighted-region)
    (sensible-defaults/overwrite-selected-text)
    (sensible-defaults/ensure-that-files-end-with-newline)
    (sensible-defaults/confirm-closing-emacs)
    (sensible-defaults/quiet-startup)
    (sensible-defaults/make-dired-file-sizes-human-readable)
    (sensible-defaults/shorten-yes-or-no)
    (sensible-defaults/always-highlight-code)
    (sensible-defaults/refresh-buffers-when-files-change)
    (sensible-defaults/show-matching-parens)
    (sensible-defaults/flash-screen-instead-of-ringing-bell)
    (sensible-defaults/set-default-line-length-to 80)
    (sensible-defaults/open-clicked-files-in-same-frame-on-mac)
    (sensible-defaults/yank-to-point-on-mouse-click))

  ;; Keybindings:

  (defun sensible-defaults/bind-commenting-and-uncommenting ()
    "Comment or uncomment a region by hitting M-;."
    (global-set-key (kbd "M-;")
                    'sensible-defaults/comment-or-uncomment-region-or-line))

  (defun sensible-defaults/bind-home-and-end-keys ()
    "Make <home> and <end> move point to the beginning and end of
  the line, respectively."
    (global-set-key (kbd "<home>") 'move-beginning-of-line)
    (global-set-key (kbd "<end>") 'move-end-of-line))

  (defun sensible-defaults/bind-keys-to-change-text-size ()
    "Bind C-+ and C-- to increase and decrease text size,
  respectively."
    (define-key global-map (kbd "C-)") 'sensible-defaults/reset-text-size)
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C-=") 'text-scale-increase)
    (define-key global-map (kbd "C-_") 'text-scale-decrease)
    (define-key global-map (kbd "C--") 'text-scale-decrease))

  (defun sensible-defaults/use-all-keybindings ()
    "Use all of the sensible-defaults keybindings."
    (sensible-defaults/bind-commenting-and-uncommenting)
    (sensible-defaults/bind-home-and-end-keys)
    (sensible-defaults/bind-keys-to-change-text-size))

  ;; Non-default settings:

  (defun sensible-defaults/backup-to-temp-directory ()
    "Store backups and auto-saved files in
  TEMPORARY-FILE-DIRECTORY (which defaults to /tmp on Unix),
  instead of in the same directory as the file. This means we're
  still making backups, but not where they'll get in the way.

  WARNING: on most Unix-like systems /tmp is volatile, in-memory
  storage, so your backups won't survive if your computer crashes!
  If you're not willing to take this risk, you shouldn't enable
  this setting."
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t))))

  ;;; sensible-defaults.el ends here
#+END_SRC

* Third party packages
#+BEGIN_SRC emacs-lisp
  (defvar anandps/vendor-dir (expand-file-name "vendor" user-emacs-directory))
  (add-to-list 'load-path anandps/vendor-dir)

  (dolist (project (directory-files anandps/vendor-dir t "\\w+"))
    (when (file-directory-p project)
      (add-to-list 'load-path project)))

  ;; load packages from vendor directory
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  ;;(use-package auto-compile
  ;;  :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Cleanup
#+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))
#+END_SRC

* Config
#+BEGIN_SRC emacs-lisp
  ;; don't show splash screen, scratch message
  ;; and set mode to org-mode
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)

  (setq x-select-enable-clipboard t)

  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)
    (toggle-indicate-empty-lines))

  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; save temporary files in backup directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))

  ;; disable tool bar, scroll bar and menu bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; show clock
  (display-time-mode 1)

  (use-package auto-complete)
  (require 'auto-complete)
  (global-auto-complete-mode t)

  (setq-default show-trailing-whitespace t)


  (setq custom-safe-themes t)
  (use-package molokai-theme)
  (load-theme 'molokai)

  (ido-mode t)
  (setq ido-enable-flex-matching t
        ido-use-virtual-buffers t)


  (setq indent-line-function 'insert-tab)
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode nil)

  ;; c++ no indent for namespace
  (defconst my-cc-style
    '("cc-mode"
      (c-offsets-alist . ((innamespace . [0])))))
  (c-add-style "my-cc-mode" my-cc-style)
  (c-set-offset 'innamespace 0)

  ;; google c-style compatible config
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  (setq scroll-conservatively 100)
  ;;(global-hl-line-mode)
  (use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "M-/") 'company-complete-common)

  (use-package multi-term)
  (global-set-key (kbd "C-c t") 'multi-term)
  (use-package oauth2)
  (require 'oauth2)
  (use-package helm)
  (require 'helm)

#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
 ;; (mapc 'global-unset-key '([left] [right] [up] [down]))

  (global-set-key (kbd "RET") 'newline-and-indent)
  (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
* Misc-modes
#+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))

    (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))


    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))

    (add-to-list 'auto-mode-alist '("\\.scm$" . racket-mode))

    (add-to-list 'auto-mode-alist '("\\.h$" . cpp-mode))

    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
    (use-package writegood-mode)
    (add-hook 'markdown-mode-hook
              (lambda ()
                (visual-line-mode t)
                (writegood-mode t)
                (flyspell-mode t)))
    (setq markdown-command "pandoc --smart -f markdown -t html")
    (setq markdown-css-paths `(,(expand-file-name "markdown.css" anandps/vendor-dir)))
    (use-package racket-mode)
    (add-to-list 'auto-mode-alist '("\\.scm\\'" . racket-mode))
  (add-to-list 'ac-modes 'racket-mode)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
(use-package elpy)  
(elpy-enable)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)                 ; optional
  (add-hook 'python-mode-hook
  (lambda () (setq python-indent-offset 4)))
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
(setq web-mode-style-padding 2)
(setq web-mode-script-padding 2)
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)

(add-to-list 'auto-mode-alist '("\\.hbs$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org)
      (add-hook 'org-mode-hook
                (lambda ()
                  (flyspell-mode)))
      (add-hook 'org-mode-hook
                    (lambda ()
                      (writegood-mode)))

      (global-set-key (kbd "C-c a") 'org-agenda)
      (setq org-agenda-show-log t
            org-agenda-todo-ignore-scheduled t
            org-agenda-todo-ignore-deadlines t)
      (setq org-agenda-files (list "~/Dropbox/org/backlogs.org" "~/Dropbox/org/notes.org" "~/Dropbox/org/reviews.org"))

      (require 'org)
      (require 'org-install)
      (require 'org-habit)
      (add-to-list 'org-modules "org-habit")
      (setq org-habit-preceding-days 7
            org-habit-following-days 1
            org-habit-graph-column 80
            org-habit-show-habits-only-for-today t
            org-habit-show-all-today t)

      (require 'ob)

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((shell . t)
         (ditaa . t)
         (plantuml . t)
         (dot . t)
         (ruby . t)
         (js . t)
         (C . t)))

      (add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
      (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
      (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

      (defvar org-babel-default-header-args:clojure
        '((:results . "silent") (:tangle . "yes")))

      (defun org-babel-execute:clojure (body params)
        (lisp-eval-string body)
        "Done!")

      (provide 'ob-clojure)

      (setq org-src-fontify-natively t
            org-confirm-babel-evaluate nil)

      (add-hook 'org-babel-after-execute-hook (lambda ()
                                                (condition-case nil
                                                    (org-display-inline-images)
                                                  (error nil)))
                'append)

      (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))


      ;; Custom Key Bindings
      (global-set-key (kbd "<f12>") 'org-agenda)
      (global-set-key (kbd "<f5>") 'bh/org-todo)
      (global-set-key (kbd "<S-f5>") 'bh/widen)
      (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
      (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
      (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
      (global-set-key (kbd "<f9> b") 'bbdb)
      (global-set-key (kbd "<f9> c") 'calendar)
      (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
      (global-set-key (kbd "<f9> g") 'gnus)
      (global-set-key (kbd "<f9> h") 'bh/hide-other)
      (global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

      (global-set-key (kbd "<f9> I") 'bh/punch-in)
      (global-set-key (kbd "<f9> O") 'bh/punch-out)

      (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

      (global-set-key (kbd "<f9> r") 'boxquote-region)
      (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

      (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
      (global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

      (global-set-key (kbd "<f9> v") 'visible-mode)
      (global-set-key (kbd "<f9> l") 'org-toggle-link-display)
      (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
      (global-set-key (kbd "C-<f9>") 'previous-buffer)
      (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
      (global-set-key (kbd "C-x n r") 'narrow-to-region)
      (global-set-key (kbd "C-<f10>") 'next-buffer)
      (global-set-key (kbd "<f11>") 'org-clock-goto)
      (global-set-key (kbd "C-<f11>") 'org-clock-in)
      (global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
      (global-set-key (kbd "C-c c") 'org-capture)

          (defun bh/hide-other ()
            (interactive)
            (save-excursion
              (org-back-to-heading 'invisible-ok)
              (hide-other)
              (org-cycle)
              (org-cycle)
              (org-cycle)))

          (defun bh/set-truncate-lines ()
            "Toggle value of truncate-lines and refresh window display."
            (interactive)
            (setq truncate-lines (not truncate-lines))
            ;; now refresh window display (an idiom from simple.el):
            (save-excursion
              (set-window-start (selected-window)
                                (window-start (selected-window)))))

          (defun bh/make-org-scratch ()
            (interactive)
            (find-file "/tmp/publish/scratch.org")
            (gnus-make-directory "/tmp/publish"))

          (defun bh/switch-to-scratch ()
            (interactive)
            (switch-to-buffer "*scratch*"))
        (setq org-todo-keywords
              (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

        (setq org-todo-keyword-faces
              (quote (("TODO" :foreground "red" :weight bold)
                      ("NEXT" :foreground "blue" :weight bold)
                      ("DONE" :foreground "forest green" :weight bold)
                      ("WAITING" :foreground "orange" :weight bold)
                      ("HOLD" :foreground "magenta" :weight bold)
                      ("CANCELLED" :foreground "forest green" :weight bold))))

        (setq org-todo-state-tags-triggers
              (quote (("CANCELLED" ("CANCELLED" . t))
                      ("WAITING" ("WAITING" . t))
                      ("HOLD" ("WAITING") ("HOLD" . t))
                      (done ("WAITING") ("HOLD"))
                      ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                      ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                      ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

        (setq org-directory "~/Dropbox/org")
        (setq org-default-notes-file "~/Dropbox/org/backlogs.org")

        ;; I use C-c c to start capture mode
        (global-set-key (kbd "C-c c") 'org-capture)

        ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
        (setq org-capture-templates
              (quote (("t" "todo" entry (file "~/Dropbox/org/backlogs.org")
                       "* TODO %i%?")
                      ("n" "Notes" entry (file "~/Dropbox/org/backlogs.org")
                       "* NOTE %?\n%U" :empty-lines 1)
                      ("N" "Note with Clipboard" entry (file "~/Dropbox/org/backlogs.org")
                       "* NOTE %?\n%U\n   %c" :empty-lines 1)
                      ("w" "Review: Weekly Review" entry (file+datetree "~/Dropbox/org/reviews.org")
                       (file "~/Dropbox/org/templates/weekly.org"))
                      ("m" "Review: Monthly Review" entry (file+datetree "~/Dropbox/org/reviews.org")
                       (file "~/Dropbox/org/templates/monthly.org"))
                      ("d" "Review: Daily Review" entry (file+datetree "~/Dropbox/org/reviews.org")
                       (file "~/Dropbox/org/templates/daily.org")))))

        ;; Remove empty LOGBOOK drawers on clock out
        (defun bh/remove-empty-drawer-on-clock-out ()
          (interactive)
          (save-excursion
            (beginning-of-line 0)
            (org-remove-empty-drawer-at "LOGBOOK" (point))))

        (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

        ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
        (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                         (org-agenda-files :maxlevel . 9))))

        ; Use full outline paths for refile targets - we file directly with IDO
        (setq org-refile-use-outline-path t)

        ; Targets complete directly with IDO
        (setq org-outline-path-complete-in-steps nil)

        ; Allow refile to create parent tasks with confirmation
        (setq org-refile-allow-creating-parent-nodes (quote confirm))

        ; Use IDO for both buffer and file completion and ido-everywhere to t
        (setq org-completion-use-ido t)
        (setq ido-everywhere t)
        (setq ido-max-directory-size 100000)
        (ido-mode (quote both))
        ; Use the current window when visiting files and buffers with ido
        (setq ido-default-file-method 'selected-window)
        (setq ido-default-buffer-method 'selected-window)
        ; Use the current window for indirect buffer display
        (setq org-indirect-buffer-display 'current-window)

        ;;;; Refile settings
        ; Exclude DONE state tasks from refile targets
        (defun bh/verify-refile-target ()
          "Exclude todo keywords with a done state from refile targets"
          (not (member (nth 2 (org-heading-components)) org-done-keywords)))

        (setq org-refile-target-verify-function 'bh/verify-refile-target)

        ;; Do not dim blocked tasks
        (setq org-agenda-dim-blocked-tasks nil)

        ;; Compact the block agenda view
        (setq org-agenda-compact-blocks t)

        ;; Custom agenda command definitions
        (setq org-agenda-custom-commands
              (quote (("N" "Notes" tags "NOTE"
                       ((org-agenda-overriding-header "Notes")
                        (org-tags-match-list-sublevels t)))
                      ("h" "Habits" tags-todo "STYLE=\"habit\""
                       ((org-agenda-overriding-header "Habits")
                        (org-agenda-sorting-strategy
                         '(todo-state-down effort-up category-keep))))
                      (" " "Agenda"
                       ((agenda "" nil)
                        (tags "REFILE"
                              ((org-agenda-overriding-header "Tasks to Refile")
                               (org-tags-match-list-sublevels nil)))
                        (tags-todo "-CANCELLED/!"
                                   ((org-agenda-overriding-header "Stuck Projects")
                                    (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                    (org-agenda-sorting-strategy
                                     '(category-keep))))
                        (tags-todo "-HOLD-CANCELLED/!"
                                   ((org-agenda-overriding-header "Projects")
                                    (org-agenda-skip-function 'bh/skip-non-projects)
                                    (org-tags-match-list-sublevels 'indented)
                                    (org-agenda-sorting-strategy
                                     '(category-keep))))
                        (tags-todo "-CANCELLED/!NEXT"
                                   ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                          (if bh/hide-scheduled-and-waiting-next-tasks
                                                                              ""
                                                                            " (including WAITING and SCHEDULED tasks)")))
                                    (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                    (org-tags-match-list-sublevels t)
                                    (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-sorting-strategy
                                     '(todo-state-down effort-up category-keep))))
                        (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                   ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                          (if bh/hide-scheduled-and-waiting-next-tasks
                                                                              ""
                                                                            " (including WAITING and SCHEDULED tasks)")))
                                    (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                    (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-sorting-strategy
                                     '(category-keep))))
                        (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                                   ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                          (if bh/hide-scheduled-and-waiting-next-tasks
                                                                              ""
                                                                            " (including WAITING and SCHEDULED tasks)")))
                                    (org-agenda-skip-function 'bh/skip-project-tasks)
                                    (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-sorting-strategy
                                     '(category-keep))))
                        (tags-todo "-CANCELLED+WAITING|HOLD/!"
                                   ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                          (if bh/hide-scheduled-and-waiting-next-tasks
                                                                              ""
                                                                            " (including WAITING and SCHEDULED tasks)")))
                                    (org-agenda-skip-function 'bh/skip-non-tasks)
                                    (org-tags-match-list-sublevels nil)
                                    (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                    (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                        (tags "-REFILE/"
                              ((org-agenda-overriding-header "Tasks to Archive")
                               (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                               (org-tags-match-list-sublevels nil))))
                       nil))))

                       (use-package org-bullets
                       :init
                       (add-hook 'org-mode-hook 'org-bullets-mode))
                       (setq org-ellipsis "⤵")
                       (setq org-src-fontify-natively t)
                       (setq org-src-tab-acts-natively t)
                       (setq org-src-window-setup 'current-window)
                       (add-to-list 'org-structure-template-alist
                       '("el" . "src emacs-lisp"))
#+END_SRC
* Utility functions
#+BEGIN_SRC emacs-lisp
  (defun aps/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
              (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun aps/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun aps/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun aps/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun aps/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun aps/region-or-word ()
    (if mark-active
        (buffer-substring-no-properties (region-beginning)
                                        (region-end))
      (thing-at-point 'word)))

  (defun aps/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))
#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp

(setq aps/default-font "Hack")
  (setq aps/default-font-size 10)
  (setq aps/current-font-size aps/default-font-size)

  (setq aps/font-change-increment 1.1)

  (defun aps/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat aps/default-font "-" (number-to-string aps/current-font-size)))

  (defun aps/set-font-size ()
    "Set the font to `aps/default-font' at `aps/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (aps/font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (defun aps/reset-font-size ()
    "Change font size back to `aps/default-font-size'."
    (interactive)
    (setq aps/current-font-size aps/default-font-size)
    (aps/set-font-size))

  (defun aps/increase-font-size ()
    "Increase current font size by a factor of `aps/font-change-increment'."
    (interactive)
    (setq aps/current-font-size
          (ceiling (* aps/current-font-size aps/font-change-increment)))
    (aps/set-font-size))

  (defun aps/decrease-font-size ()
    "Decrease current font size by a factor of `aps/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq aps/current-font-size
          (max 1
               (floor (/ aps/current-font-size aps/font-change-increment))))
    (aps/set-font-size))

  (define-key global-map (kbd "C-)") 'aps/reset-font-size)
  (define-key global-map (kbd "C-+") 'aps/increase-font-size)
  (define-key global-map (kbd "C--") 'aps/decrease-font-size)

  (aps/reset-font-size)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status)

  :config
  (use-package evil-magit)
  (use-package with-editor)
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)

  (with-eval-after-load 'magit-remote
    (magit-define-popup-action 'magit-push-popup ?P
      'magit-push-implicitly--desc
      'magit-push-implicitly ?p t))

  (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC
* Google calendar
#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC
* Slack
Getting slack token: It's easyish! Open and sign into the slack customization page, e.g. subdomain.slack.com/customize, right click anywhere > inspect element. Open the console and paste:
=window.prompt("your api token is: ", TS.boot_data.api_token)=
#+BEGIN_SRC emacs-lisp
    ;; I'm using use-package and el-get and evil
      (use-package slack
        :commands (slack-start)
        :init
        (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
        (setq slack-prefer-current-team t)
        :config
        (slack-register-team
         :name "geminusai"
         :default t
         :client-id slack-client-id
         :client-secret slack-client-secret
         :token slack-token
         :subscribed-channels '(rename rrrrr)
         :full-and-display-names t))

        ;; (evil-define-key 'normal slack-info-mode-map
      ;;     ",u" 'slack-room-update-messages)
      ;;   (evil-define-key 'normal slack-mode-map
      ;;     ",c" 'slack-buffer-kill
      ;;     ",ra" 'slack-message-add-reaction
      ;;     ",rr" 'slack-message-remove-reaction
      ;;     ",rs" 'slack-message-show-reaction-users
      ;;     ",pl" 'slack-room-pins-list
      ;;     ",pa" 'slack-message-pins-add
      ;;     ",pr" 'slack-message-pins-remove
      ;;     ",mm" 'slack-message-write-another-buffer
      ;;     ",me" 'slack-message-edit
      ;;     ",md" 'slack-message-delete
      ;;     ",u" 'slack-room-update-messages
      ;;     ",2" 'slack-message-embed-mention
      ;;     ",3" 'slack-message-embed-channel
      ;;     "\C-n" 'slack-buffer-goto-next-message
      ;;     "\C-p" 'slack-buffer-goto-prev-message)
      ;;    (evil-define-key 'normal slack-edit-message-mode-map
      ;;     ",k" 'slack-message-cancel-edit
      ;;     ",s" 'slack-message-send-from-buffer
      ;;     ",2" 'slack-message-embed-mention
      ;;     ",3" 'slack-message-embed-channel))

       (use-package alert
         :commands (alert)
        :init
        (setq alert-default-style 'notifier))
#+END_SRC
* Twitter
#+BEGIN_SRC emacs-lisp
  (require 'twittering-mode)
  (setq twittering-use-master-password t)
#+END_SRC
* Pocket
#+BEGIN_SRC emacs-lisp
(require 'pocket-mode)
#+END_SRC
